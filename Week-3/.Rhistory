cat_lovers <- read_csv("cat-lovers.csv")
cat_lovers
# Get more information about the mean() command using ? operator
?mean
# Convert the variable number_of_cats using as.integer()
mean(as.interger(cat_lovers$number_of_cats))
# Convert the variable number_of_cats using as.integer()
mean(as.integer(cat_lovers$number_of_cats))
# Display the elements of the column number_of_cats
cat_lovers$number_of_cats
# Display the elements of the column number_of_cats after converting it using as.numeric()
as.integer(cat_lovers$number_of_cats)
# Empty vector
x <- vector()
# Type of the empty vector
typeof(x)
# Method 3
x<-c(TRUE,FALSE,TRUE,FALSE,TRUE)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-logical(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("logical",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("character",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-character(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c('A','b','r','q')
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x<-seq(from=1,to=5,by=0.1)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("integer",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-integer(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(1,2,3,4,5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 5
x<-1:5
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x<-seq(from=1,to=5,by=1)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x<-seq(from=1,to=5,by=0.1)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("double",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-double(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(1.787,0.63573,2.3890)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Create a vector
x<-c(1.8)
# Check the type of x
typeof(x)
# Add a character to the vector
x<-c(x,2)
# Check the type of x
typeof(x)
# Add a character to the vector
x<-c(x,'a')
# Check the type of x
typeof(x)
# Create a vector
x<-c(TRUE)
# Check the type of x
typeof(x)
# Add a number to the vector
x<-(x,2)
# Add a number to the vector
x<-c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x<-c(1L)
# Check the type of x
typeof(x)
# Add a logical value to the vector
x<-c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x<-c('a')
# Check the type of x
typeof(x)
# Add a logical value to the vector
x<-c(x,TRUE)
# Check the type of x
typeof(x)
# Create a vector
x<-c(1L)
# Check the type of x
typeof(x)
# Add a number to the vector
x<-c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x<-c(1L)
# Check the type of x
typeof(x)
# Convert the vector to type character
x <- as.character(x)
# Check the type of x
typeof(x)
# Create a vector
x<-c('A')
# Check the type of x
typeof(x)
# Convert the vector to type double
x <- as.double(x)
# Check the type of x
typeof(x)
# Convert the vector to type double
x <- as.numeric(x)
# Check the type of x
typeof(x)
# Access one element with index 3
x[3]
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
x[3]
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[2:4]
# Access elements with non-consecutive indices, 1,3,5
x[c(1,3,5)]
# Access elements using logical vector
x[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]
# Access elements using the conditional operator <
x[x<10]
# Display the length of the vector
print(length(x))
# Display the type of the vector
print(typeof(x))
# Display the structure of the vector
print(str(x))
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Print the names of the list
names(my_pie)
# Retrieve the element named type
my_pie$type
# Retrieve a truncated list
my_pie["type"]
# Retrieve the element named type
my_pie[["type"]]
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Selecting numeric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(paid_total, term, interest_rate,
annual_income,paid_late_fees,debt_to_income)
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>%
select(grade, state, homeownership, disbursement_method) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("openintro, repos = ("http://cran.us.r-project.org")
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
knit_with_parameters("C:/Users/brend/Desktop/NM2207/Week-3/Code-along-3.Rmd")
knitr::opts_chunk$set(echo = TRUE)
x<-c(25,30,22,28,33)
print(x)
ages<-c(25,30,22,28,33)
print(ages)
student_info<-list(names="Alice","Bob","Catherine",scores=85,92,78,Pass=TRUE,TRUE,FALSE)
print(student_info)
x<-c(1,2,3,4,10)
x<-as.list(x)
x<-list(1,"a",0.289,TRUE)
print(x)
data<-c(10,15.5,"20",TRUE)
typeof(data)
data<-c(10,15.5,"20",TRUE)
typeof(10)
data<-c(10,15.5,"20",TRUE)
typeof(10)
typof(15.5)
data<-c(10,15.5,"20",TRUE)
typeof(10)
typeof(15.5)
typeof("20")
typeof(TRUE)
prices<-c(20.5,15,"25")
prices<-c(20.5,15,"25")
prices<- as.numeric(prices)
prices<-c(20.5,15,"25")
prices<- as.numeric(prices)
typeof(prices)
prices<-c(20.5,15,"25")
prices<- as.numeric(prices)
print(prices)
x<-c(5, 10, 15,"apple", "banana", "cherry")
print(typeof(x))
x<-c(5, 10, 15)
print(typeof(x))
x<-c(5, 10, 15,"apple", "banana", "cherry")
print(typeof(x))
numbers<-c(7,12.5,"15.7")
sum(numbers)
numbers<-c(7,12.5,"15.7")
sum(numbers)
numbers<-c(7,12.5,"15.7")
sum(numbers)
numbers<-c(7,12.5,"15.7")
numbers<- as.numeric(numbers)
print(numbers)
numbers<-c(7,12.5,"15.7")
numbers<- as.numeric(numbers)
print(sum(numbers))
grades<-c(85,90.5,"75.2")
mean(grades)
grades<-c(85,90.5,"75.2")
grades<- as.numeric(grades)
mean(grades)
names<-c("Alice","Bob","Catherine")
scores<-c(85,92,78)
Pass<-c(TRUE,TRUE,FALSE)
student_info<-list(names,scores,Pass)
print(student_info)
numeric<-c(10,20,30)
character<-c("red","green","blue")
logical<-c(TRUE,FALSE,TRUE)
mixed_data<-list(numeric,character,logical)
print(student_info)
numeric<-c(10,20,30)
character<-c("red","green","blue")
logical<-c(TRUE,FALSE,TRUE)
mixed_data<-list(numeric,character,logical)
print(student_info)
numeric<-c(10,20,30)
character<-c("red","green","blue")
logical<-c(TRUE,FALSE,TRUE)
mixed_data<-list(numeric,character,logical)
print(mixed_data)
numeric<-c(10,20,30)
character<-c("red","green","blue")
logical<-c(TRUE,FALSE,TRUE)
mixed_data<-list(numeric,character,logical)
print(mixed_data)
print(mean(numeric))
numeric<-c(10,20,30)
character<-c("red","green","blue")
logical<-c(TRUE,FALSE,TRUE)
mixed_data<-list(numeric,character,logical)
print(mean(numeric))
filter_rows <- c("Bob")
filter_rows <- c("Bob")
student_info %>% filter(names)
filter_rows <- c("Bob")
student_info %>% filter(names%in%filter_rows)
filter_rows <- c("Bob")
student_info %>% filter(name%in%filter_rows) %>% select(scores)
data<-c(10,15.5,"20",TRUE)
typeof(data[1])
typeof(data[2])
typeof(data[3])
typeof(data[4])
typeof(10)
typeof(15.5)
typeof("20")
typeof(TRUE)
data<-c(10,15.5,"20",TRUE)
typeof(data[1])
typeof(data[2])
typeof(data[3])
typeof(data[4])
names<-c("Alice","Bob","Catherine")
scores<-c(85,92,78)
Pass<-c(TRUE,TRUE,FALSE)
student_info<-list(Names=names,scores,Pass)
print(student_info)
names<-c("Alice","Bob","Catherine")
scores<-c(85,92,78)
Pass<-c(TRUE,TRUE,FALSE)
student_info<-list(Names=names,Score=scores,results=Pass)
print(student_info)
student_info$Score
student_info$Score[Name=="Bob"]
student_info$Score[student_info$Name=="Bob"]
student_info$Score[student_info$Names=="Bob"]
RandVals<-c(228393,22.34242,12,2,3,4,5,999)
length(RandVals)
RandVals<-c(228393,22.34242,12,2,3,4,5,999)
length(RandVals)
print(Randvals(length(RandVals)))
RandVals<-c(228393,22.34242,12,2,3,4,5,999)
length(RandVals)
tail(RandVals)
RandVals<-c(228393,22.34242,12,2,3,4,5,999)
length(RandVals)
tail(RandVals,1)
RandVals<-c(228393,22.34242,12,2,3,4,5,999)
length(RandVals)
print(tail(RandVals,1))
words <- c("apple", "banana", "cherry", "apple")
if(words[itr]=="apple"):
words <- c("apple", "banana", "cherry", "apple")
if(words[itr]=="apple"): print(itr)
words <- c("apple", "banana", "cherry", "apple")
if(words[itr]=="apple"):print(itr)
words <- c("apple", "banana", "cherry", "apple")
if(words[itr]=="apple")
print(itr)
words <- c("apple", "banana", "cherry", "apple")
words["apple"]
words <- c("apple", "banana", "cherry", "apple")
words[3]
findInterval("apple")
words <- c("apple", "banana", "cherry", "apple")
x<- "apple"
findInterval(x, words)
words <- c("apple", "banana", "cherry", "apple")
x<- "apple"
#findInterval(x, words)
?which
words <- c("apple", "banana", "cherry", "apple")
x<- "apple"
#findInterval(x, words)
?which
words <- c("apple", "banana", "cherry", "apple")
x<- "apple"
#findInterval(x, words)
which(LETTERS=="apple")
words <- c("apple", "banana", "cherry", "apple")
arrayInd(which(words =="apple"))
words <- c("apple", "banana", "cherry", "apple")
test=which(words =="apple"))
words <- c("apple", "banana", "cherry", "apple")
test=which(words =="apple")
words <- c("apple", "banana", "cherry", "apple")
test=which(words =="apple")
words <- c("apple", "banana", "cherry", "apple")
test=which(words =="apple")
print(test)
ages<-c(12,24,34,45,46,66,78)
print(ages[x>30])
ages<-c(12,24,34,45,46,66,78)
print(ages[ages>30])
vec<-c(1:20)
count=0
for (i in vec){count= count + 1if(count == 3){print (i)}}
vec<-c(1:20)
count=0
for (i in vec){count= count + 1,if(count == 3){print (i)}}
vec<-c(1:20)
count=0
for (i in vec){count= count + 1
if(count == 3){print (i)}}
vec<-c(1:20)
count=0
for (i in vec){count= count + 1
if(count == 3){print (i),count = 0}}
vec<-c(1:20)
count=0
for (i in vec){count= count + 1
if(count == 3){print (i)count = 0}}
vec<-c(1:20)
count=0
for (i in vec){count= count + 1
if(count == 3){print (i)
count = 0}}
vec<-c(1:10)
print(vec(4:8))
vec<-c(1:10)
print(seq(from(4)to(8))
vec<-c(1:10)
print(seq(from=4to=8))
vec<-c(1:10)
print(seq(from=4,to=8))
x<- c(10, NA, 15, 20)
print(x)
x<- c(10, NA, 15, 20)
anyNA(x)
x<- c(10, 3, 15, 20)
anyNA(x)
x<- c(10, NA, 15, 20)
anyNA(x)
dailytemp<-c(80,89,70,97,94,92,91,90,89)
hot_days<dailytemp>90
dailytemp<-c(80,89,70,97,94,92,91,90,89)
hot_days<-dailytemp>90
print(hot_days)
dailytemp<-c(80,89,70,97,94,92,91,90,89)
hot_days<-dailytemp>90
print(sum(hot_days)
dailytemp<-c(80,89,70,97,94,92,91,90,89)
hot_days<-dailytemp>90
print(sum(hot_days))
names<-c("apple","kiwi","watermelon","honeydew","banana")
longnames<-names(character>6)
print(sum(longnames))
names<-c("apple","kiwi","watermelon","honeydew","banana")
longnames<-names(character>6)
print((longnames))
names<-c("apple","kiwi","watermelon","honeydew","banana")
longnames<-names(character>6)
print(longnames)
names<-c("apple","kiwi","watermelon","honeydew","banana")
longnames<-names(nchar>6)
names<-c("apple","kiwi","watermelon","honeydew","banana")
longnames<-nchar(names)>6
print(longnames)
names<-c("apple","kiwi","watermelon","honeydew","banana")
longnames<-nchar(names)>6
print(longnames)in(names)
names<-c("apple","kiwi","watermelon","honeydew","banana")
longnames<-nchar(names)>6
print(longnames)
names<-c("apple","kiwi","watermelon","honeydew","banana")
longnames<-nchar(names)>6
longfruit<-names[longnames]
print(longnames)
names<-c("apple","kiwi","watermelon","honeydew","banana")
longnames<-nchar(names)>6
longfruit<-names[longnames]
print(longfruit)
print(numbers<-c(1:20))
print(numbers[divisble_by_5<-numbers %% 2 == 0])
print(numbers<-c(1:20))
print(numbers[divisble_by_5<-numbers %% 10 == 0])
print(numbers<-c(1:20))
print(numbers[divisble_by_5<-numbers %% 5 == 0])
numbers<-c(1:20))
numbers<-c(1:20)
numbers[divisble_by_5<-numbers %% 5 == 0]
vec1<-c(2,3,4,5)
vec2<-c(6,7,8,9)
print(c<-vec1>vec2)
